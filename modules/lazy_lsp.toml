[[plugins]]
repo = 'Raimondi/delimitMate'
on_event = 'InsertEnter'
hook_source = '''
  let g:delimitMate_balance_matchpairs = 1
  let g:delimitMate_expand_cr = 1
  let g:delimitMate_expand_space = 0
  let g:delimitMate_smart_quotes = 1
  let g:delimitMate_expand_inside_quotes = 0
  " conflict with other plugins, work in vim files but failed in others
  " anyway, I like use this plugin in comment
  let g:delimitMate_excluded_regions = ""
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType cpp let b:delimitMate_matchpairs = "(:),[:],{:}"
  " sometimes I need to write cpp code in markdown
  au FileType markdown let b:delimitMate_matchpairs = "(:),[:],{:}"
'''

[[plugins]]
repo = 'numToStr/Comment.nvim'
on_event = 'BufReadPre'
hook_source = '''
  lua require('Comment').setup()
'''

# event reference: https://yianwillis.github.io/vimcdoc/doc/autocmd.html
[[plugins]]
repo = 'neoclide/coc.nvim'
on_event = ['VimEnter', 'BufNewFile']
on_event = 'BufReadPre'
merged = true
rev = 'release'
hook_source = '''
  source $VIM_PLUGIN_PATH/coc.vim
'''

[[plugins]]
repo = 'sbdchd/neoformat'
on_cmd = 'Neoformat'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
# on_event = 'FileType'
on_event = 'BufReadPre'
hook_post_update = ':TSUpdate'
on_cmd = ['TSUpdate', 'TSInstall', 'TSInstallInfo', 'TSModuleInfo', 'TSConfigInfo']
hook_source = '''
lua <<EOF
vim.api.nvim_command('set foldmethod=expr')
vim.api.nvim_command('set foldexpr=nvim_treesitter#foldexpr()')
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'maintained',
    highlight = {enable = true, disable = {'vim', 'markdown'}},
    textobjects = {
        select = {
            enable = true,
            keymaps = {
                ["af"] = "@function.outer",
                ["if"] = "@function.inner",
                ["ac"] = "@class.outer",
                ["ic"] = "@class.inner"
            }
        },
        move = {
            enable = true,
            set_jumps = true, -- whether to set jumps in the jumplist
            goto_next_start = {
                ["]["] = "@function.outer",
                ["]m"] = "@class.outer"
            },
            goto_next_end = {
                ["]]"] = "@function.outer",
                ["]M"] = "@class.outer"
            },
            goto_previous_start = {
                ["[["] = "@function.outer",
                ["[m"] = "@class.outer"
            },
            goto_previous_end = {
                ["[]"] = "@function.outer",
                ["[M"] = "@class.outer"
            }
        }
    },
    rainbow = {
        enable = true,
        extended_mode = true, -- Highlight also non-parentheses delimiters, boolean or table: lang -> boolean
        max_file_lines = 1000 -- Do not enable for files with more than 1000 lines, int
    },
    context_commentstring = {enable = true, enable_autocmd = false},
    matchup = {enable = true},
    context = {enable = true, throttle = true}
}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex', 'bib']
hook_source = '''
  let g:tex_flavor='latex'
  let g:vimtex_view_general_viewer = 'zathura'
  let g:vimtex_view_method='zathura'
  let g:vimtex_quickfix_mode=0
  let g:tex_conceal='abdmg'
  let g:vimtex_compiler_progname = 'nvr'
  " let g:vimtex_compiler_latexmk = {'build_dir': {-> expand("%:t:r")}}
  let g:vimtex_compiler_latexmk = {'build_dir': 'build'}
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']
build = 'sh -c "cd app & yarn install"'
hook_source = '''
  let g:mkdp_auto_close = 0
'''

# [[plugins]]
# repo = 'godlygeek/tabular'
# on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']

# [[plugins]]
# repo = 'preservim/vim-markdown'
# on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']

[[plugins]]
repo = 'ferrine/md-img-paste.vim'
on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']
hook_source = '''
  let g:mdip_imgdir = 'pic'
  let g:mdip_imgname = 'image'
  autocmd FileType markdown nnoremap <silent> <C-p> :call mdip#MarkdownClipboardImage()<CR>
'''

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']
hook_source = '''
let g:markdown_fenced_languages = ['cpp', 'python', 'bash=sh']
let g:markdown_syntax_conceal = 0
let g:markdown_minlines = 100
'''

[[plugins]]
repo = 'dkarter/bullets.vim'
on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']
hook_source = '''
  let g:bullets_enabled_file_types = [
      \ 'markdown',
      \ 'text',
      \ 'gitcommit',
      \ 'scratch'
      \]
  let g:bullets_outline_levels = ['num', 'std-', 'std*', 'std+']
'''
