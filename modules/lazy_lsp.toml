[[plugins]]
repo = 'Raimondi/delimitMate'
on_event = 'InsertEnter'
hook_source = '''
  let g:delimitMate_balance_matchpairs = 1
  let g:delimitMate_expand_cr = 1
  let g:delimitMate_expand_space = 0
  let g:delimitMate_smart_quotes = 1
  let g:delimitMate_expand_inside_quotes = 0
  " conflict with other plugins, work in vim files but failed in others
  " anyway, I like use this plugin in comment
  let g:delimitMate_excluded_regions = ""
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType cpp let b:delimitMate_matchpairs = "(:),[:],{:}"
  " sometimes I need to write cpp code in markdown
  au FileType markdown let b:delimitMate_matchpairs = "(:),[:],{:}"
'''

[[plugins]]
repo = 'numToStr/Comment.nvim'
on_event = 'BufReadPre'
hook_source = '''
  lua require('Comment').setup()
'''

# for lua files, install stylua
[[plugins]]
repo = 'sbdchd/neoformat'
on_cmd = 'Neoformat'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
# on_event = 'FileType'
on_event = 'BufReadPre'
hook_post_update = ':TSUpdate'
on_cmd = ['TSUpdate', 'TSInstall', 'TSInstallInfo', 'TSModuleInfo', 'TSConfigInfo']
hook_source = '''
  lua require('plugins.treesitter')
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex', 'bib']
hook_source = '''
  let g:tex_flavor='latex'
  let g:vimtex_view_general_viewer = 'zathura'
  let g:vimtex_view_method='zathura'
  let g:vimtex_quickfix_mode=0
  let g:tex_conceal='abdmg'
  let g:vimtex_compiler_progname = 'nvr'
  " let g:vimtex_compiler_latexmk = {'build_dir': {-> expand("%:t:r")}}
  let g:vimtex_compiler_latexmk = {'build_dir': 'build'}
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']
build = 'sh -c "cd app & yarn install"'
hook_source = '''
  let g:mkdp_auto_close = 0
  let g:mkdp_page_title = '${name}'
'''

[[plugins]]
repo = 'ferrine/md-img-paste.vim'
on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']
hook_source = '''
  let g:mdip_imgdir = 'pic'
  let g:mdip_imgname = 'image'
  autocmd FileType markdown nnoremap <silent> <C-p> :call mdip#MarkdownClipboardImage()<CR>
'''

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = ['markdown', 'pandoc', 'markdown', 'rmd']
hook_source = '''
  let g:markdown_fenced_languages = ['cpp', 'python', 'bash=sh']
  let g:markdown_syntax_conceal = 0
  let g:markdown_minlines = 100
'''
