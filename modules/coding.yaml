- repo: Raimondi/delimitMate
  on_event: InsertEnter
  hook_source: |
    let g:delimitMate_expand_cr = 0
    let g:delimitMate_expand_space = 1
    let g:delimitMate_smart_quotes = 1
    let g:delimitMate_expand_inside_quotes = 0
    au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
    au FileType cpp let b:delimitMate_matchpairs = "(:),[:],{:}"

- repo: tomtom/tcomment_vim
  on_event: BufReadPre

- repo: neoclide/coc.nvim
# on_event: BufRead
  merged: 0
  rev: 'release'
  hook_source: |
    let g:coc_snippet_next = '<TAB>'
    let g:coc_snippet_prev = '<S-TAB>'
    let g:coc_status_error_sign = '•'
    let g:coc_status_warning_sign = '•'
    let g:coc_disable_transparent_cursor = 1
    let g:coc_global_extensions = [
                \ 'coc-pyright',
                \ 'coc-texlab',
                \ 'coc-spell-checker',
                \ 'coc-git',
                \ 'coc-gitignore',
                \ 'coc-tabnine',
                \ 'coc-json',
                \ 'coc-highlight',
                \ 'coc-lists',
                \ 'coc-lua',
                \ 'coc-yaml',
                \ 'coc-marketplace',
                \ 'coc-vimlsp'
                \ ]
    set hidden
    set nobackup
    set nowritebackup
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gr <Plug>(coc-references)
    nnoremap <leader>ca :<C-u>CocList -I grep<cr>
    nnoremap <leader>cf :<C-u>CocList files<cr>
    nnoremap <leader>? :CocSearch <C-R>=expand("<cword>")<CR><CR>
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction
    nnoremap <silent> <localleader>y  :<C-u>CocList -A --normal yank<cr>
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
    vmap <leader>a <Plug>(coc-codeaction-selected)
    nmap <leader>a <Plug>(coc-codeaction-selected)
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
